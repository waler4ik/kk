// Code generated by kk; BUT FEEL FREE TO EDIT.

package rabbitmq

import (
	"context"
	"fmt"
	"time"

	"github.com/caarlos0/env/v10"
	amqp "github.com/rabbitmq/amqp091-go"

	"{{.ModulePath}}/internal/secretmanager"
)

type config struct {
	Address      string `env:"RBMQ_ADDRESS" envDefault:"rbmq:5672"`
	User         string `env:"RBMQ_USER" envDefault:"guest"`
	DBName       string `env:"RBMQ_DBNAME" envDefault:"guest"`
	ExchangeName string `env:"RBMQ_EXCHANGE_NAME" envDefault:"exchange"`
	ExchangeKind string `env:"RBMQ_EXCHANGE_TYPE" envDefault:"topic"`
}

type RBMQProducer struct {
	log          func(string, ...any)
	conn         *amqp.Connection
	ch           *amqp.Channel
	exchangeName string
}

func New(logger func(string, ...any), sm secretmanager.SecretManager) (*RBMQProducer, error) {
	cfg := config{}
	if err := env.Parse(&cfg); err != nil {
		return nil, fmt.Errorf("parse env: %w", err)
	}
	pwd, err := sm.Secret("RBMQ_PWD")
	if err != nil {
		return nil, fmt.Errorf("secret: %w", err)
	}

	conn, err := amqp.Dial(fmt.Sprintf("amqp://%s:%s@%s/", cfg.User, pwd, cfg.Address))
	if err != nil {
		return nil, fmt.Errorf("dial: %w", err)
	}

	ch, err := conn.Channel()
	if err != nil {
		return nil, fmt.Errorf("channel: %w", err)
	}

	err = ch.ExchangeDeclare(
		cfg.ExchangeName, // name
		cfg.ExchangeKind, // kind
		true,             // durable
		false,            // auto-deleted
		false,            // internal
		false,            // no-wait
		nil,              // arguments
	)
	if err != nil {
		return nil, fmt.Errorf("exchange declare: %w", err)
	}
	return &RBMQProducer{
		log:          logger,
		conn:         conn,
		ch:           ch,
		exchangeName: cfg.ExchangeName,
	}, nil
}

func (p *RBMQProducer) Broadcast(data []byte, route string) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	return p.ch.PublishWithContext(ctx,
		p.exchangeName, // exchange
		route,          // routing key
		false,          // mandatory
		false,          // immediate
		amqp.Publishing{
			ContentType: "application/json",
			Body:        data,
		})
}
