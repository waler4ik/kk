// Code generated by kk; DO NOT EDIT.

package {{.PathBase}}

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"

	"{{.ModulePath}}/internal/api"
	"{{.ModulePath}}/internal/errors"
)

type Controller struct {
	p Provider
}

func NewController(p Provider) Controller {
	return Controller{
		p: p,
	}
}

const RoutePath = "{{.RoutePath}}"

func ConfigureRouter(a *api.API, g *gin.Engine) {
	{{.ResourceNamePlLower}}Provider := NewProvider(a)
	{{.ResourceNamePlLower}}Controller := NewController({{.ResourceNamePlLower}}Provider)
	grp := g.Group(RoutePath)
	grp.Use(Paginate)
	grp.GET("/", {{.ResourceNamePlLower}}Controller.List{{.ResourceNamePlCaps}})
	grp.POST("/", {{.ResourceNamePlLower}}Controller.Create{{.ResourceNameSgCaps}})
	subGrp := grp.Group("/:{{.ResourceNameSgLower}}ID")
	subGrp.Use({{.ResourceNamePlLower}}Controller.{{.ResourceNameSgCaps}}Ctx)
	subGrp.GET("/", {{.ResourceNamePlLower}}Controller.Get{{.ResourceNameSgCaps}})
	subGrp.PUT("/", {{.ResourceNamePlLower}}Controller.Update{{.ResourceNameSgCaps}})
	subGrp.DELETE("/", {{.ResourceNamePlLower}}Controller.Delete{{.ResourceNameSgCaps}})
}

func (c Controller) List{{.ResourceNamePlCaps}}(ctx *gin.Context) {
	var qp QueryParameter
	if err := ctx.ShouldBindQuery(&qp); err != nil {
		ctx.JSON(errors.New(http.StatusBadRequest, err))
		return
	}

	if {{.ResourceNamePlLower}}, err := c.p.Get{{.ResourceNamePlCaps}}(ctx, qp); err != nil {
		ctx.JSON(errors.New(http.StatusInternalServerError, err))
		return
	} else {
		ctx.JSON(http.StatusOK, {{.ResourceNamePlLower}})
	}
}

func (c Controller) Create{{.ResourceNameSgCaps}}(ctx *gin.Context) {
	{{.ResourceNameSgLower}} := &{{.ResourceNameSgCaps}}{}
	if err := ctx.ShouldBindJSON({{.ResourceNameSgLower}}); err != nil {
		ctx.JSON(errors.New(http.StatusBadRequest, err))
		return
	}

	if {{.ResourceNameSgLower}}, err := c.p.Create{{.ResourceNameSgCaps}}(ctx, {{.ResourceNameSgLower}}); err != nil {
		ctx.JSON(errors.New(http.StatusInternalServerError, err))
		return
	} else {
		ctx.JSON(http.StatusCreated, {{.ResourceNameSgLower}})
	}
}

func (c Controller) Get{{.ResourceNameSgCaps}}(ctx *gin.Context) {
	{{.ResourceNameSgLower}} := ctx.Value({{.ResourceNameSgCaps}}CtxKey).(*{{.ResourceNameSgCaps}})
	ctx.JSON(http.StatusOK, {{.ResourceNameSgLower}})
}

func (c Controller) Update{{.ResourceNameSgCaps}}(ctx *gin.Context) {
	{{.ResourceNameSgLower}} := ctx.Value({{.ResourceNameSgCaps}}CtxKey).(*{{.ResourceNameSgCaps}})

	if err := ctx.ShouldBindJSON({{.ResourceNameSgLower}}); err != nil {
		ctx.JSON(errors.New(http.StatusBadRequest, err))
		return
	}

	if err := c.p.Update{{.ResourceNameSgCaps}}(ctx, {{.ResourceNameSgLower}}); err != nil {
		ctx.Status(http.StatusOK)
		return
	}
}

func (c Controller) Delete{{.ResourceNameSgCaps}}(ctx *gin.Context) {
	{{.ResourceNameSgLower}} := ctx.Value({{.ResourceNameSgCaps}}CtxKey).(*{{.ResourceNameSgCaps}})
	if err := c.p.Delete{{.ResourceNameSgCaps}}(ctx, {{.ResourceNameSgLower}}); err != nil {
		ctx.JSON(errors.New(http.StatusInternalServerError, err))
		return
	}
}

const {{.ResourceNameSgCaps}}CtxKey string = "{{.ResourceNameSgCaps}}CtxKey"

func (c Controller) {{.ResourceNameSgCaps}}Ctx(ctx *gin.Context) {
	if {{.ResourceNameSgLower}}ID := ctx.Param("{{.ResourceNameSgLower}}ID"); {{.ResourceNameSgLower}}ID != "" {
		if {{.ResourceNameSgLower}}, err := c.p.Get{{.ResourceNameSgCaps}}(ctx, {{.ResourceNameSgLower}}ID); err != nil {
			ctx.JSON(errors.New(http.StatusInternalServerError, err))
			return
		} else {
			ctx.Set({{.ResourceNameSgCaps}}CtxKey, {{.ResourceNameSgLower}})
		}
	} else {
		ctx.JSON(errors.New(http.StatusNotFound, fmt.Errorf("{{.ResourceNameSgLower}} not found")))
		return
	}
	ctx.Next()
}
