// Code generated by kk; DO NOT EDIT.

package {{.PathBase}}

import (
	"context"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
	"github.com/gorilla/schema"

	"{{.ModulePath}}/internal/api"
	"{{.ModulePath}}/internal/errors"
)

type Controller struct {
	p  Provider
	sd *schema.Decoder
}

func NewController(p Provider) Controller {
	return Controller{
		p:  p,
		sd: schema.NewDecoder(),
	}
}

const RoutePath = "{{.RoutePath}}"

func ConfigureRouter(a *api.API, r *chi.Mux) {
	{{.ResourceNamePlLower}}Provider := NewProvider(a)
	{{.ResourceNamePlLower}}Controller := NewController({{.ResourceNamePlLower}}Provider)
	r.Route(RoutePath, func(r chi.Router) {
		r.With(Paginate).Get("/", {{.ResourceNamePlLower}}Controller.List{{.ResourceNamePlCaps}})
		r.Post("/", {{.ResourceNamePlLower}}Controller.Create{{.ResourceNameSgCaps}})

		r.Route("/{ {{- .ResourceNameSgLower}}ID}", func(r chi.Router) {
			r.Use({{.ResourceNamePlLower}}Controller.{{.ResourceNameSgCaps}}Ctx)
			r.Get("/", {{.ResourceNamePlLower}}Controller.Get{{.ResourceNameSgCaps}})
			r.Put("/", {{.ResourceNamePlLower}}Controller.Update{{.ResourceNameSgCaps}})
			r.Delete("/", {{.ResourceNamePlLower}}Controller.Delete{{.ResourceNameSgCaps}})
		})
	})
}

func (c Controller) List{{.ResourceNamePlCaps}}(w http.ResponseWriter, r *http.Request) {
	var qp QueryParameter
	if err := c.sd.Decode(&qp, r.URL.Query()); err != nil {
		render.Render(w, r, errors.ErrBadRequest(err))
		return
	}

	forRendering := []render.Renderer{}
	if {{.ResourceNamePlLower}}, err := c.p.Get{{.ResourceNamePlCaps}}(r.Context(), qp); err != nil {
		render.Render(w, r, errors.ErrInternalServerError(err))
		return
	} else {
		for _, c := range {{.ResourceNamePlLower}} {
			forRendering = append(forRendering, c)
		}
		if err := render.RenderList(w, r, forRendering); err != nil {
			render.Render(w, r, errors.ErrRender(err))
			return
		}
	}
}

func (c Controller) Create{{.ResourceNameSgCaps}}(w http.ResponseWriter, r *http.Request) {
	{{.ResourceNameSgLower}} := &{{.ResourceNameSgCaps}}{}
	if err := render.Bind(r, {{.ResourceNameSgLower}}); err != nil {
		render.Render(w, r, errors.ErrBadRequest(err))
		return
	}

	if err := c.p.Create{{.ResourceNameSgCaps}}(r.Context(), {{.ResourceNameSgLower}}); err != nil {
		render.Render(w, r, errors.ErrInternalServerError(err))
		return
	}

	render.Status(r, http.StatusCreated)
	render.Render(w, r, {{.ResourceNameSgLower}})
}

func (c Controller) Get{{.ResourceNameSgCaps}}(w http.ResponseWriter, r *http.Request) {
	{{.ResourceNameSgLower}} := r.Context().Value({{.ResourceNameSgCaps}}CtxKey).(*{{.ResourceNameSgCaps}})
	if err := render.Render(w, r, {{.ResourceNameSgLower}}); err != nil {
		render.Render(w, r, errors.ErrRender(err))
		return
	}
}

func (c Controller) Update{{.ResourceNameSgCaps}}(w http.ResponseWriter, r *http.Request) {
	{{.ResourceNameSgLower}} := r.Context().Value({{.ResourceNameSgCaps}}CtxKey).(*{{.ResourceNameSgCaps}})

	if err := render.Bind(r, {{.ResourceNameSgLower}}); err != nil {
		render.Render(w, r, errors.ErrBadRequest(err))
		return
	}

	if err := c.p.Update{{.ResourceNameSgCaps}}(r.Context(), {{.ResourceNameSgLower}}); err != nil {
		render.Render(w, r, errors.ErrInternalServerError(err))
		return
	}
}

func (c Controller) Delete{{.ResourceNameSgCaps}}(w http.ResponseWriter, r *http.Request) {
	{{.ResourceNameSgLower}} := r.Context().Value({{.ResourceNameSgCaps}}CtxKey).(*{{.ResourceNameSgCaps}})
	if err := c.p.Delete{{.ResourceNameSgCaps}}(r.Context(), {{.ResourceNameSgLower}}); err != nil {
		render.Render(w, r, errors.ErrInternalServerError(err))
		return
	}
}

type ContextKeyType string

const {{.ResourceNameSgCaps}}CtxKey = ContextKeyType("{{.ResourceNameSgCaps}}CtxKey")

func (c Controller) {{.ResourceNameSgCaps}}Ctx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var {{.ResourceNameSgLower}} *{{.ResourceNameSgCaps}}
		var err error

		if {{.ResourceNameSgLower}}ID := chi.URLParam(r, "{{.ResourceNameSgLower}}ID"); {{.ResourceNameSgLower}}ID != "" {
			{{.ResourceNameSgLower}}, err = c.p.Get{{.ResourceNameSgCaps}}(r.Context(), {{.ResourceNameSgLower}}ID)
			if err != nil {
				render.Render(w, r, errors.ErrNotFound)
				return
			}
		} else {
			render.Render(w, r, errors.ErrNotFound)
			return
		}

		ctx := context.WithValue(r.Context(), {{.ResourceNameSgCaps}}CtxKey, {{.ResourceNameSgLower}})
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}
