package initial

import (
	"bytes"
	"embed"
	"errors"
	"fmt"
	"io/fs"
	"os"
	"strings"
	"text/template"

	"github.com/waler4ik/kk/internal/config"
)

var feelFreeToEditPrefix = []byte("// Code generated by kk; BUT FEEL FREE TO EDIT.")

func Walk(content embed.FS, templateDir string, config config.Config) error {
	if err := fs.WalkDir(content, templateDir, func(path string, d fs.DirEntry, err error) error {
		if path == templateDir {
			return nil
		}

		if d.IsDir() {
			if err := os.MkdirAll(cleanPath(path, templateDir), os.ModePerm); err != nil {
				return fmt.Errorf("MkdirAll %s: %s", path, err)
			}
		} else if strings.HasSuffix(path, ".tmpl") {
			tt := template.Must(template.ParseFS(content, path))
			for _, t := range tt.Templates() {
				filePath := strings.TrimSuffix(cleanPath(path, templateDir), ".tmpl")
				if _, err := os.Stat(filePath); err == nil {
					if currentFile, err := os.ReadFile(filePath); err != nil {
						return fmt.Errorf("ReadFile %s: %s", filePath, err)
					} else if bytes.HasPrefix(currentFile, feelFreeToEditPrefix) {
						continue
					}
				} else if !errors.Is(err, os.ErrNotExist) {
					return fmt.Errorf("stat: %w", err)
				}

				f, err := os.Create(filePath)
				if err != nil {
					return fmt.Errorf("create %s: %s", filePath, err)
				}
				if err := t.Execute(f, config); err != nil {
					return fmt.Errorf("execute %s: %s", path, err)
				}
			}
		} else {
			return nil
		}
		return nil
	}); err != nil {
		return fmt.Errorf("WalkDir %s: %s", templateDir, err)
	}
	return nil
}

func cleanPath(path, prefix string) string {
	return strings.TrimPrefix(strings.TrimPrefix(path, prefix), "/")
}
