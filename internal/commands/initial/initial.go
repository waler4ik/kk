package initial

import (
	"bytes"
	"embed"
	"errors"
	"fmt"
	"io/fs"
	"os"
	"path"
	"strings"
	"text/template"
)

var feelFreeToEditPrefix = []byte("// Code generated by kk; BUT FEEL FREE TO EDIT.")

type Config struct {
	ModuleName  string `long:"modulename" short:"m" description:"golang module name" default:"rename-or-delete-me"`
	ProjectType string `long:"projecttype" short:"p" description:"golang project type e.g. rest, grpc, graphql" default:"rest"`
}

type Init struct {
	Config

	Content embed.FS
}

func (i *Init) Execute(args []string) error {
	if i.ProjectType == "rest" {
		rootFolder := strings.ToLower(path.Base(i.ModuleName))
		if err := walk(i.Content, "templates/"+i.ProjectType, rootFolder, i.Config); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("currently only REST project type is supported")
	}
	return nil
}

func walk(content embed.FS, templateDir, rootFolder string, config Config) error {
	if err := fs.WalkDir(content, templateDir, func(path string, d fs.DirEntry, err error) error {
		if path == templateDir {
			return nil
		}

		if err := os.MkdirAll(rootFolder, os.ModePerm); err != nil {
			return fmt.Errorf("MkdirAll %s: %s", path, err)
		}

		if d.IsDir() {
			if err := os.MkdirAll(replacePrefix(path, templateDir, rootFolder), os.ModePerm); err != nil {
				return fmt.Errorf("MkdirAll %s: %s", path, err)
			}
		} else if strings.HasSuffix(path, ".tmpl") {
			tt := template.Must(template.ParseFS(content, path))
			for _, t := range tt.Templates() {
				filePath := strings.TrimSuffix(replacePrefix(path, templateDir, rootFolder), ".tmpl")
				if _, err := os.Stat(filePath); err == nil {
					if currentFile, err := os.ReadFile(filePath); err != nil {
						return fmt.Errorf("ReadFile %s: %s", filePath, err)
					} else if bytes.HasPrefix(currentFile, feelFreeToEditPrefix) {
						continue
					}
				} else if !errors.Is(err, os.ErrNotExist) {
					return fmt.Errorf("stat: %w", err)
				}

				f, err := os.Create(filePath)
				if err != nil {
					return fmt.Errorf("create %s: %s", filePath, err)
				}
				defer f.Close()
				if err := t.Execute(f, config); err != nil {
					return fmt.Errorf("execute %s: %s", path, err)
				}
			}
		} else {
			filePath := replacePrefix(path, templateDir, rootFolder)
			f, err := os.Create(filePath)
			if err != nil {
				return fmt.Errorf("create %s: %s", filePath, err)
			}
			defer f.Close()
		}
		return nil
	}); err != nil {
		return fmt.Errorf("WalkDir %s: %s", templateDir, err)
	}
	return nil
}

func replacePrefix(path, oldPrefix, newPrefix string) string {
	return strings.Replace(path, oldPrefix, newPrefix, 1)
}
