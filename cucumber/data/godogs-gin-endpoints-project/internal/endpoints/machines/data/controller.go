// Code generated by kk; DO NOT EDIT.

package data

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"

	"github.com/waler4ik/godogs-rest-project/internal/api"
	"github.com/waler4ik/godogs-rest-project/internal/errors"
)

type Controller struct {
	p Provider
}

func NewController(p Provider) Controller {
	return Controller{
		p: p,
	}
}

const RoutePath = "/machines/data"

func ConfigureRouter(a *api.API, g *gin.Engine) {
	dataProvider := NewProvider(a)
	dataController := NewController(dataProvider)
	grp := g.Group(RoutePath)
	grp.Use(Paginate)
	grp.GET("/", dataController.ListData)
	grp.POST("/", dataController.CreateDatum)
	subGrp := grp.Group("/:datumID")
	subGrp.Use(dataController.DatumCtx)
	subGrp.GET("/", dataController.GetDatum)
	subGrp.PUT("/", dataController.UpdateDatum)
	subGrp.DELETE("/", dataController.DeleteDatum)
}

func (c Controller) ListData(ctx *gin.Context) {
	var qp QueryParameter
	if err := ctx.ShouldBindQuery(&qp); err != nil {
		ctx.JSON(errors.New(http.StatusBadRequest, err))
		return
	}

	if data, err := c.p.GetData(ctx, qp); err != nil {
		ctx.JSON(errors.New(http.StatusInternalServerError, err))
		return
	} else {
		ctx.JSON(http.StatusOK, data)
	}
}

func (c Controller) CreateDatum(ctx *gin.Context) {
	datum := &Datum{}
	if err := ctx.ShouldBindJSON(datum); err != nil {
		ctx.JSON(errors.New(http.StatusBadRequest, err))
		return
	}

	if datum, err := c.p.CreateDatum(ctx, datum); err != nil {
		ctx.JSON(errors.New(http.StatusInternalServerError, err))
		return
	} else {
		ctx.JSON(http.StatusCreated, datum)
	}
}

func (c Controller) GetDatum(ctx *gin.Context) {
	datum := ctx.Value(DatumCtxKey).(*Datum)
	ctx.JSON(http.StatusOK, datum)
}

func (c Controller) UpdateDatum(ctx *gin.Context) {
	datum := ctx.Value(DatumCtxKey).(*Datum)

	if err := ctx.ShouldBindJSON(datum); err != nil {
		ctx.JSON(errors.New(http.StatusBadRequest, err))
		return
	}

	if err := c.p.UpdateDatum(ctx, datum); err != nil {
		ctx.Status(http.StatusOK)
		return
	}
}

func (c Controller) DeleteDatum(ctx *gin.Context) {
	datum := ctx.Value(DatumCtxKey).(*Datum)
	if err := c.p.DeleteDatum(ctx, datum); err != nil {
		ctx.JSON(errors.New(http.StatusInternalServerError, err))
		return
	}
}

const DatumCtxKey string = "DatumCtxKey"

func (c Controller) DatumCtx(ctx *gin.Context) {
	if datumID := ctx.Param("datumID"); datumID != "" {
		if datum, err := c.p.GetDatum(ctx, datumID); err != nil {
			ctx.JSON(errors.New(http.StatusInternalServerError, err))
			return
		} else {
			ctx.Set(DatumCtxKey, datum)
		}
	} else {
		ctx.JSON(errors.New(http.StatusNotFound, fmt.Errorf("datum not found")))
		return
	}
	ctx.Next()
}
